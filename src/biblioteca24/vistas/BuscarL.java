
package biblioteca24.vistas;

import biblioteca24.Entidades.Categoria;
import biblioteca24.Entidades.Libro;
import biblioteca24.accesoADatos.EjemplarData;
import biblioteca24.accesoADatos.LibroData;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class BuscarL extends javax.swing.JInternalFrame {
    private LibroData lD = new LibroData();
    private EjemplarData eD = new EjemplarData();
    private Categoria catSelec;
    private DefaultTableModel modelo = new DefaultTableModel();
    private TableRowSorter<DefaultTableModel> rowSorter;
    private boolean botonHabilitado = true; 
    private SolicitarEjemplar sE;
    private int isbnSelec = -1;
    public BuscarL() {
        initComponents();
        cargarCombo();
        armarCabecera();
        rowSorter = new TableRowSorter<>((DefaultTableModel) jTabla.getModel());
        jTabla.setRowSorter(rowSorter);
        cargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tbBusqueda = new javax.swing.JTextField();
        jcomboCat = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabla = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jbCerrar = new javax.swing.JButton();
        jbPrestamo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        tbBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbBusquedaKeyReleased(evt);
            }
        });

        jcomboCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcomboCatActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Seleccionar Categoria:");

        jTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTabla);

        jLabel2.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Buscar por t√≠tulo/autor/ISBN:");

        jbCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/biblioteca24/Recursos/eliminar (2).png"))); // NOI18N
        jbCerrar.setBorderPainted(false);
        jbCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCerrarActionPerformed(evt);
            }
        });

        jbPrestamo.setBackground(new java.awt.Color(0, 0, 0));
        jbPrestamo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/biblioteca24/Recursos/Image20231023170114.png"))); // NOI18N
        jbPrestamo.setBorder(null);
        jbPrestamo.setBorderPainted(false);
        jbPrestamo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrestamoActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Georgia", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 102, 0));
        jLabel3.setText("Solicitar Ejemplar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel1)
                        .addGap(75, 75, 75)
                        .addComponent(jcomboCat, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jLabel2)
                        .addGap(47, 47, 47)
                        .addComponent(tbBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(120, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbCerrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jbPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27))
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(138, 138, 138))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 842, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jbCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcomboCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(57, 57, 57)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(jbPrestamo, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbBusquedaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbBusquedaKeyReleased
        filtrarTabla();
    }//GEN-LAST:event_tbBusquedaKeyReleased

    private void jcomboCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcomboCatActionPerformed
        String textoBusqueda = tbBusqueda.getText();
        Categoria categoriaSelec = (Categoria) jcomboCat.getSelectedItem();

        if (!textoBusqueda.isEmpty() && categoriaSelec != null) {
           cargarTabla();
        } else if (!textoBusqueda.isEmpty()) {
            // Si hay texto de b√∫squeda, pero no se selecciona una categor√≠a, busca por texto
            filtrarTabla();
        } else if (categoriaSelec != Categoria.SELECCIONAR) {
            // Si no hay texto de b√∫squeda, pero se selecciona una categor√≠a, busca por categor√≠a
            cargarTablaCat(categoriaSelec);
        } else {
            // Si no hay ni texto de b√∫squeda ni categor√≠a, muestra la tabla sin filtrar
            cargarTabla();
        }
    }//GEN-LAST:event_jcomboCatActionPerformed

    private void jbCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCerrarActionPerformed
        dispose();
    }//GEN-LAST:event_jbCerrarActionPerformed

    private void jbPrestamoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrestamoActionPerformed
        int filaSelec = jTabla.getSelectedRow();
        if (botonHabilitado && filaSelec != -1 ) {
            // Verifica si hay ejemplares disponibles antes de abrir el formulario SolicitarEjemplar
            int idEjemplar = eD.obtenerIdEjemplarDisponible(isbnSelec);

            if (idEjemplar != -1) {
                sE = new SolicitarEjemplar(idEjemplar); // Pasa solo el ID del ejemplar
                Menu.escritorio.add(sE);
                sE.setVisible(true);
                sE.addInternalFrameListener(new InternalFrameAdapter() {
                    @Override
                    public void internalFrameClosed(InternalFrameEvent e) {
                        botonHabilitado = true;
                    }
                });
                botonHabilitado = false;
            } else {
                JOptionPane.showMessageDialog(this, "No hay ejemplares disponibles para este libro.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un libro de la tabla para solicitar un pr√©stamo.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbPrestamoActionPerformed

    private void jTablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaMouseClicked
        int filaSelec = jTabla.getSelectedRow();
    
        if (filaSelec != -1) {
            // Se ha seleccionado una fila en la tabla
            int isbn = (Integer) jTabla.getValueAt(filaSelec, 0);

            // Aqu√≠ puedes habilitar el bot√≥n "Solicitar Ejemplar" y almacenar el ISBN para su uso posterior
            botonHabilitado = true;
            isbnSelec = isbn;
        } else {
            // No se ha seleccionado ninguna fila en la tabla, deshabilita el bot√≥n
            botonHabilitado = false;
            isbnSelec = -1; // Establece un valor inv√°lido para el ISBN
        }
    }//GEN-LAST:event_jTablaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTabla;
    private javax.swing.JButton jbCerrar;
    public static javax.swing.JButton jbPrestamo;
    private javax.swing.JComboBox<Categoria> jcomboCat;
    private javax.swing.JTextField tbBusqueda;
    // End of variables declaration//GEN-END:variables
    private void cargarCombo(){
        jcomboCat.addItem(Categoria.SELECCIONAR);
        jcomboCat.addItem(Categoria.ARTE);
        jcomboCat.addItem(Categoria.CIENTIFICO);
        jcomboCat.addItem(Categoria.ENCICLOPEDIA);
        jcomboCat.addItem(Categoria.HISTORIA);
        jcomboCat.addItem(Categoria.INFORMATICA);
        jcomboCat.addItem(Categoria.INGENIERIA);
        jcomboCat.addItem(Categoria.LITERATURA);
    }
    private void armarCabecera(){
        modelo.addColumn("ISBN");
        modelo.addColumn("T√≠tulo");
        modelo.addColumn("Autor");
        modelo.addColumn("Categoria");
        modelo.addColumn("Editorial");
        modelo.addColumn("A√±o");
        modelo.addColumn("Ejemplares");
        modelo.addColumn("Disponible");
        jTabla.setModel(modelo);
    }
    
    private void cargarTabla() {
        List<Libro> libros = lD.listarLibros();

        modelo.setRowCount(0); // Limpiar la tabla

        for (Libro libro : libros) {
            modelo.addRow(new Object[] {
                libro.getIsbn(), libro.getTitulo(), libro.getAutor(), libro.getCategoria().name(),
                libro.getEditorial(), libro.getAnio(), libro.getCantEjemplar(), libro.isDisponible()
            });
        }
    }
    
    private void cargarTablaCat(Categoria catSelec) {
        List<Libro> libros = lD.buscarLibrosPorCategoria(catSelec);

        modelo.setRowCount(0); // Limpiar la tabla

        for (Libro libro : libros) {
            modelo.addRow(new Object[] {
                libro.getIsbn(), libro.getTitulo(), libro.getAutor(), libro.getCategoria().name(),
                libro.getEditorial(), libro.getAnio(), libro.getCantEjemplar(), libro.isDisponible()
            });
        }
    }

    private void filtrarTabla() {
        // Obt√©n el texto ingresado en el JTextField de b√∫squeda
        String textF = tbBusqueda.getText();

        // Establece el filtro de la tabla
        RowFilter<DefaultTableModel, Object> rf = RowFilter.regexFilter(textF, 0, 1, 2);
        rowSorter.setRowFilter(rf);
    }
}
